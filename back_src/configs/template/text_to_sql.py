from ml_collections import ConfigDict
Text2SQLConfig = ConfigDict()

# 기본값
Text2SQLConfig.qwen_system = """You're a helpful assistant"""

Text2SQLConfig.default_info = """
공컨은 비어있는 컨테이너를 의미합니다.
적컨은 화물이 채워진 컨테이너를 의미합니다.
입출은 입항(1)과 출항(2)을 의미합니다.
수출입은 수입(II)과 수출(OO)을 의미합니다.
수출입환적은 수입(II), 수출(OO), 수입환적(IT), 수출환적(OT)을 의미합니다.
"""

Text2SQLConfig.table_column_info = """사용가능한 테이블명:
data

사용 가능한 컬럼명:
data.PRT_AT_CODE - 항구코드
data.IO_DATE - 년-월-일 시:분:초 형태의 입출항 일시
data.YYYY - 년
data.MM - 월
data.DD - 일
data.G_IN_OUT - 입항(1), 출항(2)
data.IO_TP - 수출입유형(II, IT, OO, OT)
data.KOR_VSSL_GROSS - 아국선 총 톤 수(TON)
data.FOR_VSSL_GROSS - 외국선 총 톤 수(TON)
data.KOR_FULL_TEU - 아국선 적컨 TEU
data.FOR_FULL_TEU - 외국선 적컨 TEU
data.KOR_EMP_TEU - 아국선 공컨 TEU
data.FOR_EMP_TEU - 외국선 공컨 TEU
data.FAC_CODE - 시설코드(부두, 터미널 등)
data.CTRY_CODE - 국가 코드
data.AGENT_NAME - 선사명
data.AGENT_CODE - 선사코드명
"""


# 추천 질문
# (DB 검색할 경우)
Text2SQLConfig.relevant_query_with_database_prompt = """주어진 요청문을 기반으로 추가적인 요청문 4개를 생성해주세요.

# 사용 가능한 정보:
- 시간정보 : 2020년부터 2024년, 월, 일
- 항구정보 : 부산항
- 입항, 출항, 수입, 수출, 수입환적, 수출환적

# 사용 불가능한 정보:
- 상품 정보
- 국가 정보

# 요청 형태
1. 유사한 질문 (1)
2. 질문 주제는 동일하지만 다른 유형의 질문 (2)
3. 완전히 다른 질문 (3)
4. 완전히 다른 질문 (4)

사용 가능한 정보와 사용 불가능한 정보를 참고하여 요청 형태대로 요청문 4개를 생성합니다.

반드시 리스트 형태로 작성해주세요.

# 요청문
{MESSAGE}

# 출력양식
{FORMAT_INSTRUCTIONS}
"""

# DB 검색안하고, Web 검색할 경우
Text2SQLConfig.relevant_query_with_search_prompt = """주어진 요청문을 기반으로 추가적인 요청문 4개를 생성해주세요.

# 요청 형태
1. 유사한 질문 (1)
2. 질문 주제는 동일하지만 다른 유형의 질문 (2)
3. 질문 주제가 조금 다른 유형의 질문 (3)
4. 질문 주제가 완전히 다른 유형의 질문 (4)

요청 형태대로 요청문 4개를 생성합니다.

반드시 리스트 형태로 작성해주세요.

# 요청문
{MESSAGE}

# 출력양식
{FORMAT_INSTRUCTIONS}
"""


# 정보추출, 라우팅
Text2SQLConfig.classify_request = """항만공사에는 PORT-MIS라는 데이터베이스가 존재한다.
PORT-MIS 데이터베이스에는 무역항의 선박입항, 항만 내 시설사용, 관제사항, 화물 반출입, 세입징수, 선박출항 등 모든 항만운영업무가 저장된다. 미세먼지 정보는 저장되지 않는다.

사용자 요청 : {MESSAGE}

사용자 요청이 PORT-MIS 데이터베이스에 있는 특정 데이터를 요청하는것인지 명확한가요?

조회해야할 데이터가 명확하면 YES를 생성하세요.

조회해야할 데이터가 명확하지 않으면 NO를 생성하세요.

분석을 위한 요청일 경우 NO를 생성하세요.

이유, 원인을 묻는 요청일 경우 NO를 생성하세요.

출력 양식 : {FORMAT_INSTRUCTIONS}
"""

# 항구
Text2SQLConfig.check_port = """사용자 요청 :

{MESSAGE}

사용할 수 있는 항구 이름 목록 : 

{PORT_DATA_LST}

사용자 요청에서 항구 이름이 있나요?

사용자 요청에서 항구 이름이 있으면 YES, 없으면 NO를 생성하세요.

무조건 YES 또는 NO만 생성하세요.

출력 양식 : {FORMAT_INSTRUCTIONS}"""

Text2SQLConfig.extract_port = """사용자 요청 :

{MESSAGE}

사용할 수 있는 항구 이름 목록 : 

{PORT_DATA_LST}

사용할 수 있는 항구 이름 목록을 사용해서 사용자 요청에서 항구 이름을 추출하세요.

사용자 요청에 항구 이름 개수가 1개 일경우 1개만 추출하세요.
사용자 요청에 항구 이름 개수가 2개 일경우 2개만 추출하세요.
사용자 요청에 항구 이름 개수가 3개 일경우 3개만 추출하세요.

무조건 항구명 목록만 생성하세요. 추가적인 정보는 생성하지 마세요.

{FORMAT_INSTRUCTIONS}"""

# 시간
Text2SQLConfig.check_time = """다음 문장에서 기간, 시간(*년,*월) 내용이 있나요?

{MESSAGE}

답변 : YES or NO"""

Text2SQLConfig.extract_time = """다음 문장에서 기간, 시간(*년,*월) 내용을 추출하세요.

{MESSAGE}

'최근 *개년' 같은 표현이 있을경우 현재시간({TIME})을 참고해서 계산하세요.
'최근 *개년' 같은 표현에서 시작 년도는 1월 1일부터 지정합니다. 예를들어 최근 2개년일 경우 (20xx.01.01 ~ 현재)

추가적인 정보는 절대 생성하지 마세요.

다음 양식을 무조건 따르세요. 

시간 정보 : """


# 시설
Text2SQLConfig.check_facil = """사용자 요청에서 시설명이 포함되어 있는지 확인하세요. 시설명 목록의 내용이 1개라도 포함되어 있다면 출력양식에 YES 아니면 NO를 기입하세요.
참고사항을 고려하여 판단해야 합니다.

# 참고사항
1. 출력은 오직 YES, NO 둘 중 하나로만 합니다.
2. 별도의 수식어는 절대 포함하지 않습니다.

# 시설명 목록
시설명 목록 = {FAC_NAME_LST}

# 사용자 요청
{MESSAGE}

# 출력양식
{FORMAT_INSTRUCTIONS}"""

Text2SQLConfig.extract_facil = """사용자 요청 :

{MESSAGE}

사용할 수 있는 시설명 목록 : 

{FAC_NAME_LST}

사용할 수 있는 시설 이름 목록을 사용해서 사용자 요청에서 시설 이름을 추출하세요.

사용자 요청에 시설 이름 개수가 1개 일경우 1개만 추출하세요.
사용자 요청에 시설 이름 개수가 2개 일경우 2개만 추출하세요.
사용자 요청에 시설 이름 개수가 3개 일경우 3개만 추출하세요.

무조건 시설명 목록만 생성하세요. 추가적인 정보는 생성하지 마세요.

{FORMAT_INSTRUCTIONS}"""

# 수출입유형
Text2SQLConfig.check_iotype = """사용자 요청에서 수출입유형이 포함되어 있는지 확인하세요. 수출입유형 목록의 내용이 1개라도 포함되어 있다면 출력양식에 YES, NO를 기입하세요.

# 수출입유형 목록
수출입유형 목록 = ['수입', '수출', '수입환적', '수출환적']

# 사용자 요청
{MESSAGE}

# 출력양식
{FORMAT_INSTRUCTIONS}"""

Text2SQLConfig.extract_iotype = """수출입유형 목록에서 사용자 요청에 포함된 유형들을 선택해주세요. 수출입유형은 수입(II), 수출(OO), 수입환적(IT), 수출환적(OT) 4가지 있습니다.
선택한 결과는 II, OO, IT, OT와 같이 코드명으로 답변해야합니다. 수출입유형이 여러개인 경우 쉼표로 구분하여 리스트 형태로 작성해주세요.
수출입유형을 선택할 때 참고사항을 고려하고, 답변은 수출입유형 이외에 하지 않습니다.

# 참고사항
1. 수출입은 수입과 수출을 줄여서 부르는 명칭으로 II, OO를 의미합니다.
2. 수출입환적은 수입, 수출, 환적을 줄여서 부르는 명칭으로 II, OO, IT, OT를 의미합니다.
3. 환적은 IT, OT를 의미합니다.

# 사용자 요청
{MESSAGE}

# 출력양식
{FORMAT_INSTRUCTIONS}"""

# 국가
Text2SQLConfig.check_country = """사용자 요청에서 국가명이 포함되어 있는지 확인하세요. 

사용자 요청에 국가명 목록의 내용이 1개라도 포함되어 있다면 YES를 생성하세요.
대한민국의 도시를 제외한 도시명이 나타날 경우 YES를 생성하세요.
지리적 구분(동아시아, 유럽, 아프리카 등)을 나타내는 단어가 나올경우 YES를 생성하세요.
국가별로 요청하는 경우 YES를 생성하세요.

위 4가지 상황이 아닌 경우에는 NO를 생성하세요.

# 국가명 목록
국가명 목록 = {COUNTRY_LIST}

# 사용자 요청
{MESSAGE}

무조건 YES 또는 NO만 생성하세요.

답변 : YES or NO"""

Text2SQLConfig.extract_country = """사용자 요청 : 

{MESSAGE}

사용할 수 있는 국가명 목록 :

{COUNTRY_LIST}

사용할 수 있는 국가명 목록을 사용해서 사용자 요청에서 국가명을 추출하세요.

# 참고사항
1. 도시명이 나타날 경우 해당 도시에 대한 국가명을 선택합니다. (뉴욕 -> 미국, 바르셀로나 -> 스페인)
2. 지리적 구분(동아시아, 유럽, 아프리카 등)을 나타내는 단어가 나올경우, 해당 지역에 포함되는 국가명들을 추출합니다.
3. 동아시아 국가는 중국(중화인민공화국), 대만(중화민국), 일본, 대한민국, 북한(조선민주주의인민공화국), 몽골, 홍콩, 마카오입니다.

국가명이 여러개인 경우 출력양식에 쉼표로 구분하여 리스트 형태로 작성합니다.

무조건 국가명 목록만 생성하세요. 추가적인 정보는 생성하지 마세요.

{FORMAT_INSTRUCTIONS}"""


# 생성
# 단순 답변
Text2SQLConfig.generate_general_answer = """위 대화는 이전 대화내용입니다.

# 현재 사용자 요청

{MESSAGE}

현재 사용자 요청은 정확합니다. 되물어보는 질문은 하지마세요.

이전 대화와 현재 사용자 요청이 관련있을 경우, 이전 대화를 참고하세요.

답변은 이해하기 쉬운 형태로 사용하세요.

### 설명
- 설명 
- 설명 
- 설명

답변 : """

Text2SQLConfig.generate_answer_with_context = """위 대화는 이전 대화내용입니다.

{CONTEXT}

# 현재 사용자 요청 : 

{MESSAGE}

# 지시사항
1. 현재 사용자 요청은 정확합니다. 되물어보는 질문은 하지마세요.
2. 현재 시간은 {TIME} 입니다. 현재 시간을 고려하세요.
3. 참고내용은 사용자 요청을 해결할 수 있는 정확한 내용만 참고합니다. 따라서 참고 내용중에 현재 사용자 요청을 해결할 수 있는 정확한 정보만을 사용하세요. 현재 사용자 요청을 해결할 수 있는 질문이 없다면, 당신이 아는대로 답변하세요.
4. 이전 대화와 사용자 요청이 관련있을 경우, 이전 대화를 참고하세요.

답변은 이해하기 쉬운 형태로 사용하세요.

### 설명
- 설명 
- 설명 
- 설명

답변 : """

# 단순 SQL 쿼리 생성
Text2SQLConfig.generate_sql = """사용자 요청 :

{MESSAGE}

추가 정보:

{INFOS_STR}
{DEFAULT}

데이터베이스 정보:

{SCHEMA}
{COLUMNS}

사용자 요청을 만족하는 SQL 쿼리를 생성하세요.

데이터베이스 종류는 Mariadb 입니다.
{AGGREGATE}

반드시 SQL 쿼리만 생성하세요.

```sql <sql code> ```
"""

# 분석
Text2SQLConfig.generate_analysis = """당신은 데이터분석 전문가입니다.

# 통계 데이터 

{DATAFRAME}

# 통계 정보 

{STATISTICS}

# 지시사항
1. 통계 데이터 컬럼 정보는 절대 포함하지 않습니다.
2. 데이터 분석 보고서 처럼 답변을 생성하세요. 보고서라는 언급은 하지마세요.
3. 통계 데이터와 통계 정보만 사용해서 답변하세요.
4. 통계 정보를 무조건 사용해서 표로 설명하세요.

# 질문

{MESSAGE}

답변은 이해하기 쉬운 형태로 사용하세요. 표로 설명할 수 있다면, 표로 설명하는게 좋습니다.

### 설명
- 설명 
- 설명 
- 설명

답변 : """


# 수정 및 에러처리
Text2SQLConfig.rewrite_sql_request = """이전 사용자 요청에서 수정사항이 있다.

이전 사용자 요청 : {PREV_MESSAGE}

이전 사용자 요청에 대해 생성된 SQL 쿼리 : {PREV_SQL}

수정사항 : {MESSAGE}

이전 사용자 요청과 수정사항을 참고하여, 사용자 요청문을 다시 작성하라.

재작성된 사용자 요청문만 생성하라.

재작성된 사용자 요청문 : """


# 에러처리
Text2SQLConfig.handle_error = """사용자 요청 :

{MESSAGE}

추가 정보:

{INFOS_STR}
{DEFAULT}

데이터베이스 정보:

{SCHEMA}

이전 SQL 쿼리 :

{SQL}

오류 내용 : 

{ERROR}

이전 SQL 쿼리를 실행할때 오류가 발생했습니다. 오류 내용을 참고하여 SQL 쿼리를 수정하세요.

무조건 오류가 났던 부분만 수정하세요.

```sql <sql code> ```
"""

# 피드백
Text2SQLConfig.feedback = """사용자 요청 :

{MESSAGE}

추가 정보:

{INFOS_STR}
{DEFAULT}

데이터베이스 정보:

{SCHEMA}

Columns 명은 Alias를 사용하여 적합한 한국어로 변경하세요.

사용자 요청, 추가 정보, 데이터베이스 정보를 참고하여 SQL 쿼리를 생성하였다.

생성된 SQL 쿼리 : {SQL}

생성된 SQL 쿼리가 요구사항을 정확하게 반영하였는지 평가하라.

생성된 SQL 쿼리가 요구사항을 정확하게 반영했다면 YES를 생성하라.

생성된 SQL 쿼리가 요구사항을 정확하게 반영하지 못했다면 Feedback 정보를 생성하라.

무조건 YES 또는 Feedback 정보만 생성하세요. 

무조건 SQL 쿼리 생성하지 마세요.

답변 : ```
"""

# 재생성
Text2SQLConfig.regenerate = """사용자 요청 : 

{MESSAGE}

추가 정보:

{INFOS_STR}
{DEFAULT}

데이터베이스 정보:

{SCHEMA}

이전 SQL 쿼리 :

{SQL}

Feedback 내용 : 

{FEEDBACK}

Feedback 내용을 참고해서 이전 SQL 쿼리를 수정하세요.

추가 정보와 데이터베이스 정보를 참고하세요.

'최근 *개년' 같은 표현이 있을경우 현재시간({TIME})을 참고해서 계산하세요.
'최근 *개년' 같은 표현에서 시작 년도는 1월 1일부터 지정합니다. 예를들어 최근 2개년일 경우 (20xx.01.01 ~ 현재)

Columns 명은 Alias를 사용하여 적합한 한국어로 변경하세요.

```sql <sql code> ```
"""


# 시각화
Text2SQLConfig.check_plot = """사용자 요청 : 

{MESSAGE}

추이, 변화, 증감, 동향을 물어보는 요청일 경우에만 YES를 생성하세요.

그 외 요청일 경우 NO를 생성하세요.

무조건 YES 또는 NO만 생성하세요.
"""

Text2SQLConfig.generate_pyplot = """당신은 데이터프레임을 사용자에게 시각화 해서 보여줄 수 있는 시각화코드 작성 전문가입니다.

주어진 데이터프레임을 효과적으로 보여줄 수 있는 시각화 방식을 선정해서 시각화 코드를 생성해주세요.

무조건 pyplot 라이브러리를 사용하세요. 

무조건 아래 요청사항을 따릅니다.
1. 적합한 시각화 방식을 선정합니다.
2. 처음에 그래프 생성할때는 fig 라는 변수에 저장합니다.
3. plt.rcParams["font.family"] = 'NanumGothic'를 이용하여 폰트를 적용합니다.
4. figsize는 무조건 (20,20) 을 사용합니다.
5. 시각화 해야할 데이터 개수만큼 subplot을 사용하여 나타냅니다. 시각화해야할 데이터가 3개라면 subplot은 3이며, 각각 시각화하세요.
6. 적적한 marker, grid, 단위(천,백만)를 적용합니다.
7. 그래프가 여러개일 경우 각 그래프들의 색깔을 다르게 설정하세요.
8. 그래프가 여러개일 경우 각 그래프들의 유형을 다르게 설정하세요. 그래프 유형 최대 갯수는 2개입니다. 시각화해야할 대상이 3개라면, 그래프 유형 A, 그래프 유형 A, 그래프 유형 B 처럼 나타냅니다.
9. x축이 시간 정보일 경우 년-월을 결합하여 시간정보로 사용하세요. 년도 숫자는 끝에 두자리만 사용하세요. 예를들어 2021년 01월은 21.01 입니다.
10. 마지막은 plt.show()를 생성하세요.


# 사용자 요청
{MESSAGE}

# 데이터프레임 (변수명:DF): 

{DATAFRAME}
{PYPLOT_ERROR_HANDLER}
데이터는 데이터프레임인 DF를 인덱싱해서 사용하세요.

답변은 작성한 시각화 파이썬 코드를 이외에 절대 하지 않습니다.

```python\n<python code>\n```
"""


# Text2SQLConfig.generate_plotly = """당신은 데이터프레임을 사용자에게 시각화 해서 보여줄 수 있는 시각화코드 작성 전문가입니다.

# 주어진 데이터프레임을 효과적으로 보여줄 수 있는 시각화 방식을 선정해서 시각화 코드를 생성해주세요.

# 무조건 plotly 라이브러리를 사용하세요.

# 무조건 아래 요청사항을 따릅니다.
# 1. 적합한 시각화 방식을 선정합니다.
# 2. 시각화 해야할 데이터 개수만큼 subplot을 사용하여 나타냅니다. 시각화해야할 데이터가 3개라면 subplot은 3이며, 각각 시각화하세요.
# 3. 적적한 marker, 단위(천,백만)를 적용합니다.
# 4. 그래프가 여러개일 경우 각 그래프들의 색깔을 다르게 설정하세요.
# 5. 그래프가 여러개일 경우 각 그래프들의 유형을 다르게 설정하세요. 그래프 유형 최대 갯수는 2개입니다. 시각화해야할 대상이 3개라면, 그래프 유형 A, 그래프 유형 A, 그래프 유형 B 처럼 나타냅니다.
# 6. x축이 시간 정보일 경우 년-월을 결합하여 시간정보로 사용하세요. 년도 숫자는 끝에 두자리만 사용하세요. 예를들어 2021년 01월은 21.01 입니다.
# 7. 제목, 범례, 주석등 무조건 한국어를 사용합니다.
# 8. 무조건 updatemenus 옵션은 사용하지 마세요.
# 9. 무조건 fig.update_layout 에서 height=2000, width=1200 으로 설정하세요.
# 10. 마지막은 fig.show()를 생성하세요.

# # 사용자 요청
# {MESSAGE}

# # 데이터프레임 (변수명:DF):

# {DATAFRAME}
# {PLOTLY_ERROR_HANDLER}
# 데이터는 데이터프레임인 DF를 인덱싱해서 사용하세요.

# 답변은 작성한 시각화 파이썬 코드를 이외에 절대 하지 않습니다.

# ```python\n<python code>\n```
# """

Text2SQLConfig.generate_plotly = """당신은 데이터프레임을 사용자에게 시각화 해서 보여줄 수 있는 시각화코드 작성 전문가입니다.

주어진 데이터프레임을 효과적으로 보여줄 수 있는 시각화 방식을 선정해서 시각화 코드를 생성해주세요. 

무조건 plotly 라이브러리를 사용하세요. 

# 지시사항
1. x축이 시간 정보일 경우 년-월을 결합하여 시간정보로 사용하세요. 년도 숫자는 끝에 두자리만 사용하세요. 예를들어 2021년 01월은 21.01 입니다.
2. 범례, 주석,  적절한 단위(천,백만)를 적용합니다. 제목은 사용하지 마세요.
3. 그래프가 여러개일 경우 각 그래프들의 색깔을 다르게 설정하세요. 색상은 다음 3가지 색상을 참고해서 사용하세요. #ff6f91, #ff9671, #2c73d2
4. 경향성이 있는 데이터일 경우 추세선을 무조건 포함하세요. 추세선은 비슷한 색깔을 사용하세요.
5. 영역 아래 그라데이션(fill='tozeroy')을 적용할 수 있으면 적용하세요.
6. 마지막은 fig.show()를 생성하세요.

fig.update_layout 예시는 아래를 참고하세요.

fig.update_layout(
        legend=dict(
            orientation="h",  # 범례를 가로로 표시
            yanchor="bottom",  # y 축의 하단에 앵커
            y=1.02,            # 범례의 y 위치를 제목 바로 아래로 설정
            xanchor="center",  # x 축의 중앙에 앵커
            x=0.5              # 범례의 x 위치를 중앙으로
        ),
        plot_bgcolor='white',  # 배경색을 흰색으로 설정
        xaxis=dict(
            title="사용할 제목 지정",
            showgrid=True,
            gridcolor='lightgray',  # x축 그리드 색상을 연한 회색으로 설정
            tickangle=-45,  # x축 라벨을 45도 기울임
            ticks="outside",
            tickwidth=2,
            ticklen=5
        ),
        yaxis=dict(
            title="사용할 제목 지정",
            showgrid=True,
            gridcolor='lightgray',  # y축 (좌측) 그리드 색상을 연한 회색으로 설정
            ticks="outside",
            tickwidth=2,
            ticklen=5
        ),
        yaxis2=dict(
            title="사용할 제목 지정",
            showgrid=False,  # y축 (우측) 그리드 없앰
            ticks="outside",
            tickwidth=2,
            ticklen=5
        ),
        margin=dict(l=50, r=50, t=50, b=100),  # 그래프 외부 여백 조정
        hovermode='x unified',  # 동일한 x축 값에서 모든 데이터 표시
    )

# 사용자 요청
{MESSAGE}

# 데이터프레임 (변수명:DF): 

{DATAFRAME}
{PLOTLY_ERROR_HANDLER}
데이터는 데이터프레임인 DF를 인덱싱해서 사용하세요.

답변은 작성한 시각화 파이썬 코드를 이외에 절대 하지 않습니다.

```python\n<python code>\n```
"""


# 검색
Text2SQLConfig.generate_search_text = """당신은 검색 전문가이다.

이전 대화 :

{PREVIOUS_MESSAGE}

사용자 요청문 : 

{MESSAGE}

사용자가 검색하려는 내용을 간단하게 명사로 끝나도록 생성하라. 

작년, 1년전, 4년전, 최근 2개년처럼 정확하지 않은 시간 정보가 있을 경우 현재 시간 {TIME}을 참고하라.

이전 대화가 사용자 요청문과 관련있다면, 이전 대화를 참고해서 검색 내용을 생성하라.

이전 대화가 사용자 요청문과 관련없다면, 사용자 요청문만 사용해서 검색 내용을 생성하라.

무조건 한국어로 생성하라.

예를들어, 한국항만공사의 최근 해상풍력 관련 개발 동향에 대해 알려달라고 요청할경우 검색어는 '한국항만공사 최근 해상풍력 개발 동향'로 검색할 수 있다.

검색 내용 : """

Text2SQLConfig.select_good_search = """# 사용자 요청문 :

{MESSAGE}

# 검색 결과

{WEB}

검색 결과의 주제와 일부 내용을 보았을때, 해당 웹페이지로 들어갈 경우 사용자 요청문에 대해 답변할 수 있는지 판단하라.

답변 가능하다면 YES를 생성하라.

답변이 불가능하다면 NO를 생성하라.

답변은 무조건 YES 또는 NO를 생성하라.

답변 : YES or NO"""

Text2SQLConfig.select_good_search_with_body = """# 사용자 요청문 :

{MESSAGE}

# 검색 결과

{WEB}

검색 결과 내용이 사용자 요청문에 대한 정확한 답변이 될 수 있는지 판단하라.

무조건 해당 검색 결과 내용이 사용자 요청문에 올바른 답변이 될 수 있어야한다. 

답변 가능하다면 YES를 생성하라. 

답변이 불가능하다면 NO를 생성하라.

답변은 무조건 YES 또는 NO를 생성하라.

답변 : YES or NO"""
